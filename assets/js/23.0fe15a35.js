(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{305:function(v,_,t){"use strict";t.r(_);var s=t(14),a=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"jvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[v._v("#")]),v._v(" JVM")]),v._v(" "),_("h2",{attrs:{id:"_1-jvm是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-jvm是什么"}},[v._v("#")]),v._v(" 1.JVM是什么？")]),v._v(" "),_("p",[v._v("jvm全程是java Virtual Machine，译名java虚拟机，是一个运算在计算机上的程序，他的职责是运行java字节码文件。")]),v._v(" "),_("h2",{attrs:{id:"_2-jvm的三大核心功能是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-jvm的三大核心功能是什么"}},[v._v("#")]),v._v(" 2.jvm的三大核心功能是什么？")]),v._v(" "),_("p",[v._v("jvm包含内存管理、解释执行虚拟机指令、即时编译三大功能。")]),v._v(" "),_("h2",{attrs:{id:"_3-jvm的功能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-jvm的功能"}},[v._v("#")]),v._v(" 3.jvm的功能")]),v._v(" "),_("p",[v._v("1.解释和运行：对字节码文件中的指令，实时的解释成机器码，让计算机运行")]),v._v(" "),_("p",[v._v("2.内存管理：")]),v._v(" "),_("p",[v._v("​\t\ta.自动为对象、方法等分配内存")]),v._v(" "),_("p",[v._v("​\t\tb.自动的垃圾回收机制，回收不在使用的对象")]),v._v(" "),_("p",[v._v("3.即时编译：对热点代码进行优化，提升执行效率")]),v._v(" "),_("h2",{attrs:{id:"_4-jvm的组成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-jvm的组成"}},[v._v("#")]),v._v(" 4.jvm的组成")]),v._v(" "),_("p",[v._v("类加载子系统、运行时数据区、执行引擎、本地接口")]),v._v(" "),_("p",[_("img",{attrs:{src:"D:%5Csoftware%5Cbenisarookie%5Cdocs.vuepress%5Cdist%5Cassets%5Cimg%5Cjvm%E7%BB%84%E6%88%90.jpg",alt:""}})]),v._v(" "),_("h2",{attrs:{id:"_5-运行时数据区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-运行时数据区"}},[v._v("#")]),v._v(" 5.运行时数据区")]),v._v(" "),_("p",[v._v("运行时数据区指的是jvm所管理的内存区域，其中分成两大类：线程共享-"),_("strong",[v._v("方法区、栈")]),v._v("  线程不共享- "),_("strong",[v._v("本地方法栈、虚拟机栈、程序计数器")])]),v._v(" "),_("p",[v._v("直接内存主要是NIO使用，由操作系统直接管理，不属于jvm内存。")]),v._v(" "),_("p",[_("img",{attrs:{src:"C:%5CUsers%5CBen%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240629185913167.png",alt:""}})]),v._v(" "),_("p",[v._v("**a.程序计数器：**也叫pc寄存器，每个线程会通过程序计数器记录当前要执行的字节码指令的地址")]),v._v(" "),_("p",[_("strong",[v._v("作用：")])]),v._v(" "),_("p",[_("strong",[v._v("1")]),v._v("、程序计数器可以控制程序指令的进行，实现分支、跳转、异常等逻辑。")]),v._v(" "),_("p",[_("strong",[v._v("2")]),v._v("、在多线程执行情况下，"),_("strong",[v._v("Java")]),v._v("虚拟机需要通过程序计数器记录"),_("strong",[v._v("CPU")]),v._v("切换前解释执行到那一句指令并继续解释运行")]),v._v(" "),_("p",[_("strong",[v._v("b.栈-java虚拟机栈")])]),v._v(" "),_("p",[v._v("Java虚拟机栈采用栈的数据结构来管理方法调用中的基本数据，先进后出 ， "),_("strong",[v._v("每一个方法的调用")]),v._v("使用一个"),_("strong",[v._v("栈帧")]),v._v("来保存。每个线程都会包含一个自己的虚拟机栈，它的生命周期和线程相同。")]),v._v(" "),_("p",[_("strong",[v._v("c.栈帧")])]),v._v(" "),_("p",[v._v("主要包含三部分内容：")]),v._v(" "),_("p",[v._v("1、局部变量表，在方法执行过程中存放所有的局部变量。")]),v._v(" "),_("p",[v._v("2、操作数栈，虚拟机在执行指令过程中用来存放临时数据的一块区域。")]),v._v(" "),_("p",[v._v("3、帧数据，主要包含动态链接、方法出口、异常表等内容")]),v._v(" "),_("p",[_("strong",[v._v("d.堆")])]),v._v(" "),_("p",[v._v("1.一般Java程序中堆内存是空间最大的一块内存区域。"),_("strong",[v._v("创建出来的对象")]),v._v("都存在于"),_("strong",[v._v("堆")]),v._v("上。")]),v._v(" "),_("p",[v._v("2.栈上的局部变量表中，可以存放堆上对象的引用。静态变量也可以存放堆对象的引用，通过静态变量就可以实现对象在线程之间共享。")]),v._v(" "),_("p",[v._v("3.堆是垃圾回收最主要的部分，堆结构更详细的划分与垃圾回收器有关")]),v._v(" "),_("p",[_("strong",[v._v("e、方法区")])]),v._v(" "),_("p",[v._v("方法区是Java虚拟机规范中提出来的一个虚拟机概念，在"),_("strong",[v._v("HotSpot")]),v._v("不同版本中会用永久代或者元空间来实现。方法区主要存放的是基础信息，包含：")]),v._v(" "),_("p",[_("strong",[v._v("1")]),v._v("、每一个加载的类的元信息（基础信息）。")]),v._v(" "),_("p",[_("strong",[v._v("2")]),v._v("、运行时常量池，保存了字节码文件中的常量池内容，避免常量内容重复创建减少内存开销。")]),v._v(" "),_("p",[_("strong",[v._v("3")]),v._v("、字符串常量池，存储字符串的常量")]),v._v(" "),_("p",[_("strong",[v._v("f本地方法栈")])]),v._v(" "),_("p",[v._v("本地方法栈")]),v._v(" "),_("p",[v._v("1.Java虚拟机栈存储了Java方法调用时的栈帧，而本地方法栈存储的是native本地方法的栈帧。")]),v._v(" "),_("p",[v._v("2.在Hotspot虚拟机中，Java虚拟机栈和本地方法栈实现上使用了同一个栈空间。本地方法栈会在栈内")]),v._v(" "),_("p",[v._v("存上生成一个栈帧，临时保存方法的参数同时方便出现异常时也把本地方法的栈信息打印出来")]),v._v(" "),_("p",[_("strong",[v._v("什么是运行时数据区？")])]),v._v(" "),_("p",[v._v("运行时数据区指的是JVM所管理的内存区域，其中分成两大类：")]),v._v(" "),_("p",[v._v("线程共享 – "),_("strong",[v._v("方法区、堆")])]),v._v(" "),_("p",[v._v("方法区：存放每一个加载的类的元信息、运行时常量池、字符串常量池。")]),v._v(" "),_("p",[v._v("堆：存放创建出来的对象。")]),v._v(" "),_("p",[v._v("线程不共享 – "),_("strong",[v._v("本地方法栈、虚拟机栈、程序计数器")])]),v._v(" "),_("p",[v._v("本地方法栈和虚拟机栈都存放了线程中执行方法时需要使用的基础数据。")]),v._v(" "),_("p",[v._v("程序计数器存放了当前线程执行的字节码指令在内存中的地址。")]),v._v(" "),_("p",[v._v("直接内存主要是NIO使用，由操作系统直接管理，不属于JVM内存")]),v._v(" "),_("h2",{attrs:{id:"哪些区域会出现内存溢出-会有什么现象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#哪些区域会出现内存溢出-会有什么现象"}},[v._v("#")]),v._v(" 哪些区域会出现内存溢出，会有什么现象？")]),v._v(" "),_("p",[v._v("在"),_("strong",[v._v("Java")]),v._v("虚拟机中，只有"),_("strong",[v._v("程序计数器")]),v._v("不会出现内存溢出的情况，因为每个线程的程序计数器只保存一个固定长度的地址")]),v._v(" "),_("p",[_("strong",[v._v("堆内存溢出：")])]),v._v(" "),_("p",[v._v("堆内存溢出指的是在堆上分配的对象空间超过了堆的最大大小，从而导致的内存溢出。堆的最大大小使用**-Xmx"),_("strong",[v._v("参数进行设置，如")]),v._v("-Xmx10m"),_("strong",[v._v("代表最大堆内存大小为")]),v._v("10m**。溢出之后会抛出"),_("strong",[v._v("OutOfMemoryError")]),v._v("，并提示是"),_("strong",[v._v("Java heap Space")]),v._v("导致的：")]),v._v(" "),_("p",[_("strong",[v._v("栈内存溢出：")])]),v._v(" "),_("p",[v._v("栈内存溢出指的是所有栈帧空间的占用内存超过了最大值，最大值使用**-Xss"),_("strong",[v._v("进行设置，比如")]),v._v("-Xss256k"),_("strong",[v._v("代表所有栈帧占用内存大小加起来不能超过")]),v._v("256k**。溢出之后会抛出"),_("strong",[v._v("StackOverflowError")]),v._v("：")]),v._v(" "),_("p",[_("strong",[v._v("方法区内存溢出：")])]),v._v(" "),_("p",[v._v("方法区内存溢出指的是方法区中存放的内容比如类的元信息超过了方法区内存的最大值，"),_("strong",[v._v("JDK7")]),v._v("及之前版本方法区使用**永久代（-XX:MaxPermSize=值）"),_("strong",[v._v("来实现，"),_("strong",[v._v("JDK8")]),v._v("及之后使用")]),v._v("元空间（-XX:MaxMetaspaceSize=值）**来实现。")]),v._v(" "),_("p",[_("strong",[v._v("直接内存溢出：")])]),v._v(" "),_("p",[v._v("直接内存溢出指的是申请的直接内存空间大小超过了最大值，使用 "),_("strong",[v._v("-XX:MaxDirectMemorySize="),_("strong",[v._v("值 设置最大值。溢出之后会抛出")]),v._v("OutOfMemoryError")]),v._v("：")]),v._v(" "),_("h2",{attrs:{id:"有几种类加载器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#有几种类加载器"}},[v._v("#")]),v._v(" 有几种类加载器？")]),v._v(" "),_("p",[v._v("1.启动类加载器（Bootstrap ClassLoader）加载核心类")]),v._v(" "),_("p",[v._v("2.扩展类加载器（Extension ClassLoader）加载扩展类")]),v._v(" "),_("p",[v._v("3.应用程序类加载器（Application ClassLoader）加载应用classpath中的类")]),v._v(" "),_("p",[v._v("4.自定义类加载器，重写findClass方法。")]),v._v(" "),_("p",[v._v("JDK9及之后扩展类加载器（Extension ClassLoader）变成了平台类加载器（Platform")]),v._v(" "),_("p",[v._v("ClassLoader）")]),v._v(" "),_("h2",{attrs:{id:"什么是双亲委派机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是双亲委派机制"}},[v._v("#")]),v._v(" 什么是双亲委派机制？")]),v._v(" "),_("p",[v._v("双亲委派机制指的是：当一个类加载器接收到加载类的任务时，会"),_("strong",[v._v("向上交给父类加载器查找是否加载过，再由顶向下进行加载。")])]),v._v(" "),_("p",[v._v("**双亲委派机制的作用：**保证类加载的安全性，避免重复加载")]),v._v(" "),_("p",[v._v("**打破双亲委派机制的方法：**实现自定义类加载器，重写defineClass方法，将双亲委")]),v._v(" "),_("p",[v._v("派机制的代码去除。")])])}),[],!1,null,null,null);_.default=a.exports}}]);